/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class BookingClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:63468";
    }

    /**
     * @return OK
     */
    getBookingList(): Observable<BookingDTO[]> {
        let url_ = this.baseUrl + "/Booking/List";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBookingList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookingList(<any>response_);
                } catch (e) {
                    return <Observable<BookingDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<BookingDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetBookingList(response: HttpResponseBase): Observable<BookingDTO[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BookingDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BookingDTO[]>(<any>null);
    }

    /**
     * @return No Content
     */
    addBooking(bookingDto: BookingDTO): Observable<void> {
        let url_ = this.baseUrl + "/Booking/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(bookingDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddBooking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddBooking(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddBooking(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class BrandClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:63468";
    }

    /**
     * @return OK
     */
    getBrandList(): Observable<BrandDTO[]> {
        let url_ = this.baseUrl + "/brands/List";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBrandList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBrandList(<any>response_);
                } catch (e) {
                    return <Observable<BrandDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<BrandDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetBrandList(response: HttpResponseBase): Observable<BrandDTO[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BrandDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BrandDTO[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ClientClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:63468";
    }

    /**
     * @return OK
     */
    getClientDetail(id: string): Observable<ClientDTO> {
        let url_ = this.baseUrl + "/Client/Detail?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClientDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClientDetail(<any>response_);
                } catch (e) {
                    return <Observable<ClientDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetClientDetail(response: HttpResponseBase): Observable<ClientDTO> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ClientDTO.fromJS(resultData200) : new ClientDTO();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientDTO>(<any>null);
    }

    /**
     * @return OK
     */
    getClientList(): Observable<ClientDTO[]> {
        let url_ = this.baseUrl + "/Client/List";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClientList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClientList(<any>response_);
                } catch (e) {
                    return <Observable<ClientDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetClientList(response: HttpResponseBase): Observable<ClientDTO[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ClientDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientDTO[]>(<any>null);
    }

    /**
     * @return No Content
     */
    addClient(client: ClientDTO): Observable<void> {
        let url_ = this.baseUrl + "/Client/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(client);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddClient(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddClient(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return No Content
     */
    upDateClient(client: ClientDTO): Observable<void> {
        let url_ = this.baseUrl + "/Client/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(client);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpDateClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpDateClient(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpDateClient(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return No Content
     */
    deleteClient(id: string): Observable<void> {
        let url_ = this.baseUrl + "/Client/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteClient(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteClient(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class DepotClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:63468";
    }

    /**
     * @return OK
     */
    getDepotList(): Observable<DepotDTO[]> {
        let url_ = this.baseUrl + "/Depot/List";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDepotList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDepotList(<any>response_);
                } catch (e) {
                    return <Observable<DepotDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<DepotDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetDepotList(response: HttpResponseBase): Observable<DepotDTO[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DepotDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DepotDTO[]>(<any>null);
    }

    /**
     * @return No Content
     */
    addDepot(depotDto: DepotDTO): Observable<void> {
        let url_ = this.baseUrl + "/Depot/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(depotDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddDepot(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDepot(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddDepot(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return No Content
     */
    upDateDepot(depotDto: DepotDTO): Observable<void> {
        let url_ = this.baseUrl + "/Depot/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(depotDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpDateDepot(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpDateDepot(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpDateDepot(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return No Content
     */
    deleteDepot(id: string): Observable<void> {
        let url_ = this.baseUrl + "/Depot/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDepot(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDepot(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDepot(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ModelClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:63468";
    }

    /**
     * @return OK
     */
    getModelList(): Observable<ModelDTO[]> {
        let url_ = this.baseUrl + "/Model/List";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetModelList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetModelList(<any>response_);
                } catch (e) {
                    return <Observable<ModelDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ModelDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetModelList(response: HttpResponseBase): Observable<ModelDTO[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ModelDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ModelDTO[]>(<any>null);
    }

    /**
     * @return No Content
     */
    insertModel(modelDto: ModelDTO): Observable<void> {
        let url_ = this.baseUrl + "/Model/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(modelDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertModel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertModel(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processInsertModel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class OptionBookingClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:63468";
    }

    /**
     * @return OK
     */
    getOptionBookingList(): Observable<OptionBookingDTO[]> {
        let url_ = this.baseUrl + "/OptionBooking/List";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOptionBookingList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOptionBookingList(<any>response_);
                } catch (e) {
                    return <Observable<OptionBookingDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<OptionBookingDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetOptionBookingList(response: HttpResponseBase): Observable<OptionBookingDTO[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OptionBookingDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OptionBookingDTO[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class OptionVehicleClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:63468";
    }

    /**
     * @return OK
     */
    getOptionVehicleList(): Observable<OptionVehicleDTO[]> {
        let url_ = this.baseUrl + "/OptionVehicle/List";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOptionVehicleList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOptionVehicleList(<any>response_);
                } catch (e) {
                    return <Observable<OptionVehicleDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<OptionVehicleDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetOptionVehicleList(response: HttpResponseBase): Observable<OptionVehicleDTO[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OptionVehicleDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OptionVehicleDTO[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class VehicleClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:63468";
    }

    /**
     * @return OK
     */
    getVehicleList(): Observable<VehicleDTO[]> {
        let url_ = this.baseUrl + "/Vehicle/List";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleList(<any>response_);
                } catch (e) {
                    return <Observable<VehicleDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<VehicleDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleList(response: HttpResponseBase): Observable<VehicleDTO[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(VehicleDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VehicleDTO[]>(<any>null);
    }

    /**
     * @return OK
     */
    getVehicleDetail(id: string): Observable<VehicleDetailDTO> {
        let url_ = this.baseUrl + "/Vehicle/Detail?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleDetail(<any>response_);
                } catch (e) {
                    return <Observable<VehicleDetailDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<VehicleDetailDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleDetail(response: HttpResponseBase): Observable<VehicleDetailDTO> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? VehicleDetailDTO.fromJS(resultData200) : new VehicleDetailDTO();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VehicleDetailDTO>(<any>null);
    }
}

export class BookingDTO implements IBookingDTO {
    id?: string | undefined;
    number?: number | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    totalPrice?: number | undefined;
    status?: boolean | undefined;
    vehicle?: VehicleDTO | undefined;
    periodCoefficient?: PeriodCoefficientDTO | undefined;
    ageCoefficient?: AgeCoefficientDTO | undefined;
    client?: ClientDTO | undefined;
    depot?: DepotDTO | undefined;

    constructor(data?: IBookingDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.number = data["Number"];
            this.startDate = data["StartDate"] ? new Date(data["StartDate"].toString()) : <any>undefined;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>undefined;
            this.totalPrice = data["TotalPrice"];
            this.status = data["Status"];
            this.vehicle = data["Vehicle"] ? VehicleDTO.fromJS(data["Vehicle"]) : <any>undefined;
            this.periodCoefficient = data["PeriodCoefficient"] ? PeriodCoefficientDTO.fromJS(data["PeriodCoefficient"]) : <any>undefined;
            this.ageCoefficient = data["AgeCoefficient"] ? AgeCoefficientDTO.fromJS(data["AgeCoefficient"]) : <any>undefined;
            this.client = data["Client"] ? ClientDTO.fromJS(data["Client"]) : <any>undefined;
            this.depot = data["Depot"] ? DepotDTO.fromJS(data["Depot"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BookingDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BookingDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Number"] = this.number;
        data["StartDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["TotalPrice"] = this.totalPrice;
        data["Status"] = this.status;
        data["Vehicle"] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
        data["PeriodCoefficient"] = this.periodCoefficient ? this.periodCoefficient.toJSON() : <any>undefined;
        data["AgeCoefficient"] = this.ageCoefficient ? this.ageCoefficient.toJSON() : <any>undefined;
        data["Client"] = this.client ? this.client.toJSON() : <any>undefined;
        data["Depot"] = this.depot ? this.depot.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBookingDTO {
    id?: string | undefined;
    number?: number | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    totalPrice?: number | undefined;
    status?: boolean | undefined;
    vehicle?: VehicleDTO | undefined;
    periodCoefficient?: PeriodCoefficientDTO | undefined;
    ageCoefficient?: AgeCoefficientDTO | undefined;
    client?: ClientDTO | undefined;
    depot?: DepotDTO | undefined;
}

export class VehicleDTO implements IVehicleDTO {
    idVehicle?: string | undefined;
    brandName?: string | undefined;
    modelName?: string | undefined;
    opinionAverage?: number | undefined;
    optionNames?: string[] | undefined;

    constructor(data?: IVehicleDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.idVehicle = data["IdVehicle"];
            this.brandName = data["BrandName"];
            this.modelName = data["ModelName"];
            this.opinionAverage = data["OpinionAverage"];
            if (data["OptionNames"] && data["OptionNames"].constructor === Array) {
                this.optionNames = [] as any;
                for (let item of data["OptionNames"])
                    this.optionNames!.push(item);
            }
        }
    }

    static fromJS(data: any): VehicleDTO {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IdVehicle"] = this.idVehicle;
        data["BrandName"] = this.brandName;
        data["ModelName"] = this.modelName;
        data["OpinionAverage"] = this.opinionAverage;
        if (this.optionNames && this.optionNames.constructor === Array) {
            data["OptionNames"] = [];
            for (let item of this.optionNames)
                data["OptionNames"].push(item);
        }
        return data; 
    }
}

export interface IVehicleDTO {
    idVehicle?: string | undefined;
    brandName?: string | undefined;
    modelName?: string | undefined;
    opinionAverage?: number | undefined;
    optionNames?: string[] | undefined;
}

export class PeriodCoefficientDTO implements IPeriodCoefficientDTO {
    id?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    percentage?: number | undefined;

    constructor(data?: IPeriodCoefficientDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.startDate = data["StartDate"] ? new Date(data["StartDate"].toString()) : <any>undefined;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>undefined;
            this.percentage = data["Percentage"];
        }
    }

    static fromJS(data: any): PeriodCoefficientDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PeriodCoefficientDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["StartDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["Percentage"] = this.percentage;
        return data; 
    }
}

export interface IPeriodCoefficientDTO {
    id?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    percentage?: number | undefined;
}

export class AgeCoefficientDTO implements IAgeCoefficientDTO {
    id?: string | undefined;
    startAge?: number | undefined;
    endAge?: number | undefined;
    percentage?: number | undefined;

    constructor(data?: IAgeCoefficientDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.startAge = data["StartAge"];
            this.endAge = data["EndAge"];
            this.percentage = data["Percentage"];
        }
    }

    static fromJS(data: any): AgeCoefficientDTO {
        data = typeof data === 'object' ? data : {};
        let result = new AgeCoefficientDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["StartAge"] = this.startAge;
        data["EndAge"] = this.endAge;
        data["Percentage"] = this.percentage;
        return data; 
    }
}

export interface IAgeCoefficientDTO {
    id?: string | undefined;
    startAge?: number | undefined;
    endAge?: number | undefined;
    percentage?: number | undefined;
}

export class ClientDTO implements IClientDTO {
    id?: string | undefined;
    surname?: string | undefined;
    firstName?: string | undefined;
    driverLicenseNumber?: string | undefined;
    birthDate?: Date | undefined;
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: IClientDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.surname = data["Surname"];
            this.firstName = data["FirstName"];
            this.driverLicenseNumber = data["DriverLicenseNumber"];
            this.birthDate = data["BirthDate"] ? new Date(data["BirthDate"].toString()) : <any>undefined;
            this.email = data["Email"];
            this.password = data["Password"];
        }
    }

    static fromJS(data: any): ClientDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ClientDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Surname"] = this.surname;
        data["FirstName"] = this.firstName;
        data["DriverLicenseNumber"] = this.driverLicenseNumber;
        data["BirthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["Email"] = this.email;
        data["Password"] = this.password;
        return data; 
    }
}

export interface IClientDTO {
    id?: string | undefined;
    surname?: string | undefined;
    firstName?: string | undefined;
    driverLicenseNumber?: string | undefined;
    birthDate?: Date | undefined;
    email?: string | undefined;
    password?: string | undefined;
}

export class DepotDTO implements IDepotDTO {
    id?: string | undefined;
    name?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;

    constructor(data?: IDepotDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
            this.address = data["Address"];
            this.city = data["City"];
        }
    }

    static fromJS(data: any): DepotDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DepotDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["Address"] = this.address;
        data["City"] = this.city;
        return data; 
    }
}

export interface IDepotDTO {
    id?: string | undefined;
    name?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
}

export class BrandDTO implements IBrandDTO {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IBrandDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
        }
    }

    static fromJS(data: any): BrandDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BrandDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        return data; 
    }
}

export interface IBrandDTO {
    id?: string | undefined;
    name?: string | undefined;
}

export class ModelDTO implements IModelDTO {
    id?: string | undefined;
    name?: string | undefined;
    displacement?: number | undefined;
    weight?: number | undefined;
    price?: number | undefined;
    increasePrice?: number | undefined;
    distanceMax?: number | undefined;
    brand?: BrandDTO | undefined;

    constructor(data?: IModelDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
            this.displacement = data["Displacement"];
            this.weight = data["Weight"];
            this.price = data["Price"];
            this.increasePrice = data["IncreasePrice"];
            this.distanceMax = data["DistanceMax"];
            this.brand = data["Brand"] ? BrandDTO.fromJS(data["Brand"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModelDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ModelDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["Displacement"] = this.displacement;
        data["Weight"] = this.weight;
        data["Price"] = this.price;
        data["IncreasePrice"] = this.increasePrice;
        data["DistanceMax"] = this.distanceMax;
        data["Brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IModelDTO {
    id?: string | undefined;
    name?: string | undefined;
    displacement?: number | undefined;
    weight?: number | undefined;
    price?: number | undefined;
    increasePrice?: number | undefined;
    distanceMax?: number | undefined;
    brand?: BrandDTO | undefined;
}

export class OptionBookingDTO implements IOptionBookingDTO {
    id?: string | undefined;
    name?: string | undefined;
    isFixedPrice?: boolean | undefined;
    priceValue?: number | undefined;

    constructor(data?: IOptionBookingDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
            this.isFixedPrice = data["IsFixedPrice"];
            this.priceValue = data["PriceValue"];
        }
    }

    static fromJS(data: any): OptionBookingDTO {
        data = typeof data === 'object' ? data : {};
        let result = new OptionBookingDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["IsFixedPrice"] = this.isFixedPrice;
        data["PriceValue"] = this.priceValue;
        return data; 
    }
}

export interface IOptionBookingDTO {
    id?: string | undefined;
    name?: string | undefined;
    isFixedPrice?: boolean | undefined;
    priceValue?: number | undefined;
}

export class OptionVehicleDTO implements IOptionVehicleDTO {
    id?: string | undefined;
    name?: string | undefined;
    optionPrice?: number | undefined;

    constructor(data?: IOptionVehicleDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
            this.optionPrice = data["OptionPrice"];
        }
    }

    static fromJS(data: any): OptionVehicleDTO {
        data = typeof data === 'object' ? data : {};
        let result = new OptionVehicleDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["OptionPrice"] = this.optionPrice;
        return data; 
    }
}

export interface IOptionVehicleDTO {
    id?: string | undefined;
    name?: string | undefined;
    optionPrice?: number | undefined;
}

export class VehicleDetailDTO implements IVehicleDetailDTO {
    idVehicleDetail?: string | undefined;
    vehicle?: Vehicle | undefined;
    model?: Model | undefined;
    brand?: Brand | undefined;

    constructor(data?: IVehicleDetailDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.idVehicleDetail = data["IdVehicleDetail"];
            this.vehicle = data["Vehicle"] ? Vehicle.fromJS(data["Vehicle"]) : <any>undefined;
            this.model = data["Model"] ? Model.fromJS(data["Model"]) : <any>undefined;
            this.brand = data["Brand"] ? Brand.fromJS(data["Brand"]) : <any>undefined;
        }
    }

    static fromJS(data: any): VehicleDetailDTO {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDetailDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IdVehicleDetail"] = this.idVehicleDetail;
        data["Vehicle"] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
        data["Model"] = this.model ? this.model.toJSON() : <any>undefined;
        data["Brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IVehicleDetailDTO {
    idVehicleDetail?: string | undefined;
    vehicle?: Vehicle | undefined;
    model?: Model | undefined;
    brand?: Brand | undefined;
}

export class Vehicle implements IVehicle {
    id?: string | undefined;
    year?: number | undefined;
    mileage?: number | undefined;
    modelId?: string | undefined;
    model?: Model | undefined;
    bookings?: Booking[] | undefined;
    opinions?: Opinion[] | undefined;
    optionsVehicles?: OptionVehicleVehicle[] | undefined;

    constructor(data?: IVehicle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.year = data["Year"];
            this.mileage = data["Mileage"];
            this.modelId = data["ModelId"];
            this.model = data["Model"] ? Model.fromJS(data["Model"]) : <any>undefined;
            if (data["Bookings"] && data["Bookings"].constructor === Array) {
                this.bookings = [] as any;
                for (let item of data["Bookings"])
                    this.bookings!.push(Booking.fromJS(item));
            }
            if (data["Opinions"] && data["Opinions"].constructor === Array) {
                this.opinions = [] as any;
                for (let item of data["Opinions"])
                    this.opinions!.push(Opinion.fromJS(item));
            }
            if (data["OptionsVehicles"] && data["OptionsVehicles"].constructor === Array) {
                this.optionsVehicles = [] as any;
                for (let item of data["OptionsVehicles"])
                    this.optionsVehicles!.push(OptionVehicleVehicle.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Vehicle {
        data = typeof data === 'object' ? data : {};
        let result = new Vehicle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Year"] = this.year;
        data["Mileage"] = this.mileage;
        data["ModelId"] = this.modelId;
        data["Model"] = this.model ? this.model.toJSON() : <any>undefined;
        if (this.bookings && this.bookings.constructor === Array) {
            data["Bookings"] = [];
            for (let item of this.bookings)
                data["Bookings"].push(item.toJSON());
        }
        if (this.opinions && this.opinions.constructor === Array) {
            data["Opinions"] = [];
            for (let item of this.opinions)
                data["Opinions"].push(item.toJSON());
        }
        if (this.optionsVehicles && this.optionsVehicles.constructor === Array) {
            data["OptionsVehicles"] = [];
            for (let item of this.optionsVehicles)
                data["OptionsVehicles"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IVehicle {
    id?: string | undefined;
    year?: number | undefined;
    mileage?: number | undefined;
    modelId?: string | undefined;
    model?: Model | undefined;
    bookings?: Booking[] | undefined;
    opinions?: Opinion[] | undefined;
    optionsVehicles?: OptionVehicleVehicle[] | undefined;
}

export class Model implements IModel {
    id?: string | undefined;
    name?: string | undefined;
    displacement?: number | undefined;
    weight?: number | undefined;
    price?: number | undefined;
    increasePrice?: number | undefined;
    distanceMax?: number | undefined;
    brandId?: string | undefined;
    brand?: Brand | undefined;
    vehicles?: Vehicle[] | undefined;

    constructor(data?: IModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
            this.displacement = data["Displacement"];
            this.weight = data["Weight"];
            this.price = data["Price"];
            this.increasePrice = data["IncreasePrice"];
            this.distanceMax = data["DistanceMax"];
            this.brandId = data["BrandId"];
            this.brand = data["Brand"] ? Brand.fromJS(data["Brand"]) : <any>undefined;
            if (data["Vehicles"] && data["Vehicles"].constructor === Array) {
                this.vehicles = [] as any;
                for (let item of data["Vehicles"])
                    this.vehicles!.push(Vehicle.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Model {
        data = typeof data === 'object' ? data : {};
        let result = new Model();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["Displacement"] = this.displacement;
        data["Weight"] = this.weight;
        data["Price"] = this.price;
        data["IncreasePrice"] = this.increasePrice;
        data["DistanceMax"] = this.distanceMax;
        data["BrandId"] = this.brandId;
        data["Brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
        if (this.vehicles && this.vehicles.constructor === Array) {
            data["Vehicles"] = [];
            for (let item of this.vehicles)
                data["Vehicles"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IModel {
    id?: string | undefined;
    name?: string | undefined;
    displacement?: number | undefined;
    weight?: number | undefined;
    price?: number | undefined;
    increasePrice?: number | undefined;
    distanceMax?: number | undefined;
    brandId?: string | undefined;
    brand?: Brand | undefined;
    vehicles?: Vehicle[] | undefined;
}

export class Brand implements IBrand {
    id?: string | undefined;
    name?: string | undefined;
    models?: Model[] | undefined;

    constructor(data?: IBrand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
            if (data["Models"] && data["Models"].constructor === Array) {
                this.models = [] as any;
                for (let item of data["Models"])
                    this.models!.push(Model.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Brand {
        data = typeof data === 'object' ? data : {};
        let result = new Brand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        if (this.models && this.models.constructor === Array) {
            data["Models"] = [];
            for (let item of this.models)
                data["Models"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBrand {
    id?: string | undefined;
    name?: string | undefined;
    models?: Model[] | undefined;
}

export class Booking implements IBooking {
    id?: string | undefined;
    number?: number | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    totalPrice?: number | undefined;
    status?: boolean | undefined;
    vehicleId?: string | undefined;
    vehicle?: Vehicle | undefined;
    periodCoefficientId?: string | undefined;
    periodCoefficient?: PeriodCoefficient | undefined;
    ageCoefficientId?: string | undefined;
    ageCoefficient?: AgeCoefficient | undefined;
    clientId?: string | undefined;
    client?: Client | undefined;
    depotId?: string | undefined;
    depot?: Depot | undefined;

    constructor(data?: IBooking) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.number = data["Number"];
            this.startDate = data["StartDate"] ? new Date(data["StartDate"].toString()) : <any>undefined;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>undefined;
            this.totalPrice = data["TotalPrice"];
            this.status = data["Status"];
            this.vehicleId = data["VehicleId"];
            this.vehicle = data["Vehicle"] ? Vehicle.fromJS(data["Vehicle"]) : <any>undefined;
            this.periodCoefficientId = data["PeriodCoefficientId"];
            this.periodCoefficient = data["PeriodCoefficient"] ? PeriodCoefficient.fromJS(data["PeriodCoefficient"]) : <any>undefined;
            this.ageCoefficientId = data["AgeCoefficientId"];
            this.ageCoefficient = data["AgeCoefficient"] ? AgeCoefficient.fromJS(data["AgeCoefficient"]) : <any>undefined;
            this.clientId = data["ClientId"];
            this.client = data["Client"] ? Client.fromJS(data["Client"]) : <any>undefined;
            this.depotId = data["DepotId"];
            this.depot = data["Depot"] ? Depot.fromJS(data["Depot"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Booking {
        data = typeof data === 'object' ? data : {};
        let result = new Booking();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Number"] = this.number;
        data["StartDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["TotalPrice"] = this.totalPrice;
        data["Status"] = this.status;
        data["VehicleId"] = this.vehicleId;
        data["Vehicle"] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
        data["PeriodCoefficientId"] = this.periodCoefficientId;
        data["PeriodCoefficient"] = this.periodCoefficient ? this.periodCoefficient.toJSON() : <any>undefined;
        data["AgeCoefficientId"] = this.ageCoefficientId;
        data["AgeCoefficient"] = this.ageCoefficient ? this.ageCoefficient.toJSON() : <any>undefined;
        data["ClientId"] = this.clientId;
        data["Client"] = this.client ? this.client.toJSON() : <any>undefined;
        data["DepotId"] = this.depotId;
        data["Depot"] = this.depot ? this.depot.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBooking {
    id?: string | undefined;
    number?: number | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    totalPrice?: number | undefined;
    status?: boolean | undefined;
    vehicleId?: string | undefined;
    vehicle?: Vehicle | undefined;
    periodCoefficientId?: string | undefined;
    periodCoefficient?: PeriodCoefficient | undefined;
    ageCoefficientId?: string | undefined;
    ageCoefficient?: AgeCoefficient | undefined;
    clientId?: string | undefined;
    client?: Client | undefined;
    depotId?: string | undefined;
    depot?: Depot | undefined;
}

export class Opinion implements IOpinion {
    id?: string | undefined;
    comment?: string | undefined;
    rating?: number | undefined;
    clientId?: string | undefined;
    client?: Client | undefined;
    vehicleId?: string | undefined;
    vehicle?: Vehicle | undefined;

    constructor(data?: IOpinion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.comment = data["Comment"];
            this.rating = data["Rating"];
            this.clientId = data["ClientId"];
            this.client = data["Client"] ? Client.fromJS(data["Client"]) : <any>undefined;
            this.vehicleId = data["VehicleId"];
            this.vehicle = data["Vehicle"] ? Vehicle.fromJS(data["Vehicle"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Opinion {
        data = typeof data === 'object' ? data : {};
        let result = new Opinion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Comment"] = this.comment;
        data["Rating"] = this.rating;
        data["ClientId"] = this.clientId;
        data["Client"] = this.client ? this.client.toJSON() : <any>undefined;
        data["VehicleId"] = this.vehicleId;
        data["Vehicle"] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IOpinion {
    id?: string | undefined;
    comment?: string | undefined;
    rating?: number | undefined;
    clientId?: string | undefined;
    client?: Client | undefined;
    vehicleId?: string | undefined;
    vehicle?: Vehicle | undefined;
}

export class OptionVehicleVehicle implements IOptionVehicleVehicle {
    id?: string | undefined;
    vehicleId?: string | undefined;
    vehicle?: Vehicle | undefined;
    optionVehicleId?: string | undefined;
    optionVehicle?: OptionVehicle | undefined;

    constructor(data?: IOptionVehicleVehicle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.vehicleId = data["VehicleId"];
            this.vehicle = data["Vehicle"] ? Vehicle.fromJS(data["Vehicle"]) : <any>undefined;
            this.optionVehicleId = data["OptionVehicleId"];
            this.optionVehicle = data["OptionVehicle"] ? OptionVehicle.fromJS(data["OptionVehicle"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OptionVehicleVehicle {
        data = typeof data === 'object' ? data : {};
        let result = new OptionVehicleVehicle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["VehicleId"] = this.vehicleId;
        data["Vehicle"] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
        data["OptionVehicleId"] = this.optionVehicleId;
        data["OptionVehicle"] = this.optionVehicle ? this.optionVehicle.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IOptionVehicleVehicle {
    id?: string | undefined;
    vehicleId?: string | undefined;
    vehicle?: Vehicle | undefined;
    optionVehicleId?: string | undefined;
    optionVehicle?: OptionVehicle | undefined;
}

export class PeriodCoefficient implements IPeriodCoefficient {
    id?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    percentage?: number | undefined;

    constructor(data?: IPeriodCoefficient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.startDate = data["StartDate"] ? new Date(data["StartDate"].toString()) : <any>undefined;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>undefined;
            this.percentage = data["Percentage"];
        }
    }

    static fromJS(data: any): PeriodCoefficient {
        data = typeof data === 'object' ? data : {};
        let result = new PeriodCoefficient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["StartDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["Percentage"] = this.percentage;
        return data; 
    }
}

export interface IPeriodCoefficient {
    id?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    percentage?: number | undefined;
}

export class AgeCoefficient implements IAgeCoefficient {
    id?: string | undefined;
    startAge?: number | undefined;
    endAge?: number | undefined;
    percentage?: number | undefined;

    constructor(data?: IAgeCoefficient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.startAge = data["StartAge"];
            this.endAge = data["EndAge"];
            this.percentage = data["Percentage"];
        }
    }

    static fromJS(data: any): AgeCoefficient {
        data = typeof data === 'object' ? data : {};
        let result = new AgeCoefficient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["StartAge"] = this.startAge;
        data["EndAge"] = this.endAge;
        data["Percentage"] = this.percentage;
        return data; 
    }
}

export interface IAgeCoefficient {
    id?: string | undefined;
    startAge?: number | undefined;
    endAge?: number | undefined;
    percentage?: number | undefined;
}

export class Client implements IClient {
    id?: string | undefined;
    surname?: string | undefined;
    firstName?: string | undefined;
    driverLicenseNumber?: string | undefined;
    birthDate?: Date | undefined;
    email?: string | undefined;
    password?: string | undefined;
    opinions?: Opinion[] | undefined;
    bookings?: Booking[] | undefined;

    constructor(data?: IClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.surname = data["Surname"];
            this.firstName = data["FirstName"];
            this.driverLicenseNumber = data["DriverLicenseNumber"];
            this.birthDate = data["BirthDate"] ? new Date(data["BirthDate"].toString()) : <any>undefined;
            this.email = data["Email"];
            this.password = data["Password"];
            if (data["Opinions"] && data["Opinions"].constructor === Array) {
                this.opinions = [] as any;
                for (let item of data["Opinions"])
                    this.opinions!.push(Opinion.fromJS(item));
            }
            if (data["Bookings"] && data["Bookings"].constructor === Array) {
                this.bookings = [] as any;
                for (let item of data["Bookings"])
                    this.bookings!.push(Booking.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Client {
        data = typeof data === 'object' ? data : {};
        let result = new Client();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Surname"] = this.surname;
        data["FirstName"] = this.firstName;
        data["DriverLicenseNumber"] = this.driverLicenseNumber;
        data["BirthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["Email"] = this.email;
        data["Password"] = this.password;
        if (this.opinions && this.opinions.constructor === Array) {
            data["Opinions"] = [];
            for (let item of this.opinions)
                data["Opinions"].push(item.toJSON());
        }
        if (this.bookings && this.bookings.constructor === Array) {
            data["Bookings"] = [];
            for (let item of this.bookings)
                data["Bookings"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IClient {
    id?: string | undefined;
    surname?: string | undefined;
    firstName?: string | undefined;
    driverLicenseNumber?: string | undefined;
    birthDate?: Date | undefined;
    email?: string | undefined;
    password?: string | undefined;
    opinions?: Opinion[] | undefined;
    bookings?: Booking[] | undefined;
}

export class Depot implements IDepot {
    id?: string | undefined;
    name?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    bookings?: Booking[] | undefined;

    constructor(data?: IDepot) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
            this.address = data["Address"];
            this.city = data["City"];
            if (data["Bookings"] && data["Bookings"].constructor === Array) {
                this.bookings = [] as any;
                for (let item of data["Bookings"])
                    this.bookings!.push(Booking.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Depot {
        data = typeof data === 'object' ? data : {};
        let result = new Depot();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["Address"] = this.address;
        data["City"] = this.city;
        if (this.bookings && this.bookings.constructor === Array) {
            data["Bookings"] = [];
            for (let item of this.bookings)
                data["Bookings"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDepot {
    id?: string | undefined;
    name?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    bookings?: Booking[] | undefined;
}

export class OptionVehicle implements IOptionVehicle {
    id?: string | undefined;
    name?: string | undefined;
    optionPrice?: number | undefined;

    constructor(data?: IOptionVehicle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
            this.optionPrice = data["OptionPrice"];
        }
    }

    static fromJS(data: any): OptionVehicle {
        data = typeof data === 'object' ? data : {};
        let result = new OptionVehicle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["OptionPrice"] = this.optionPrice;
        return data; 
    }
}

export interface IOptionVehicle {
    id?: string | undefined;
    name?: string | undefined;
    optionPrice?: number | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}